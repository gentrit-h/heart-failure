/**
 * This code was generated by Builder.io
 */
import React from "react";
import NavItemButton from "./NavItemButton";
import UserDropdown from "./UserDropdown";
import { useLocation } from "react-router-dom";
import { useRecoilState } from "recoil";
import { embeddedAnalyticsState } from "../../state/atoms";
import { Search, SlidersHorizontal } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"

interface DashboardProps {}

const Header: React.FC<DashboardProps> = () => {
  const notificationsSvg = () => (
    <svg
      width="40"
      height="40"
      viewBox="0 0 40 40"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <rect width="40" height="40" rx="6" fill="white" />
      <path
        d="M21.4417 27.5C21.2952 27.7525 21.0849 27.9622 20.8319 28.1079C20.5788 28.2536 20.292 28.3303 20 28.3303C19.708 28.3303 19.4212 28.2536 19.1681 28.1079C18.9151 27.9622 18.7048 27.7525 18.5583 27.5M25 16.6666C25 15.3405 24.4732 14.0688 23.5355 13.1311C22.5979 12.1934 21.3261 11.6666 20 11.6666C18.6739 11.6666 17.4021 12.1934 16.4645 13.1311C15.5268 14.0688 15 15.3405 15 16.6666C15 22.5 12.5 24.1666 12.5 24.1666H27.5C27.5 24.1666 25 22.5 25 16.6666Z"
        stroke="#004DE1"
        stroke-width="1.66667"
        stroke-linecap="round"
        stroke-linejoin="round"
      />
    </svg>
  );
  const navItems = [
    {
      svg: notificationsSvg(),
      alt: "Notifications",
    },
  ];
  const location = useLocation();
  const getTabName = () => {
    if (location.pathname.startsWith("/dashboard")) {
      return "Dashboard";
    } else if (location.pathname.startsWith("/patients")) {
      return "Patients";
    } else if (location.pathname.startsWith("/cmems")) {
      return "CMEMS";
    } else if (location.pathname.startsWith("/cieds")) {
      return "CIEDS";
    } else if (location.pathname.startsWith("/settings")) {
      return "Settings";
    } else {
      return "Dashboard";
    }
  };
  const [tabName, setTabName] = React.useState(getTabName());
  React.useEffect(() => {
    setTabName(getTabName());
  }, [location]);

  const [embeddedAnalytics, setEmbeddedAnalytics] = useRecoilState(embeddedAnalyticsState);


  return (
    <header
      className="flex flex-wrap gap-10 justify-between items-center px-8 max-md:px-5"
      style={{
        ...(tabName == "Dashboard"
          ? {
              paddingTop: "1vh",
              paddingBottom: "1vh",
            }
          : {}),
        height: "6vh",
      }}
    >
      <h1
        className="self-stretch my-auto text-3xl font-medium leading-none text-gray-900"
        style={{
          ...(tabName == "Dashboard"
            ? {
                paddingTop: "0vh",
                paddingBottom: "0vh",
              }
            : {}),
        }}
      >
        {tabName == "Dashboard" ? "Inbox" : tabName}
      </h1>
      <div className="flex gap-2 w-[25vw] max-w-3xl mx-auto px-4">
      <div className="relative flex-1">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input
          type="text"
          placeholder="Search for patient"
          className="w-full pl-9 pr-4 h-10"
        />
      </div>
      <Button variant="outline" className="flex items-center gap-2 h-15">
        <div>
        <svg width="21" height="20" viewBox="0 0 21 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.5 10H15.5M3 5H18M8 15H13" stroke="#344054" stroke-width="1.67" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

        </div>
        Filters
      </Button>
    </div>
      <div
        className="flex gap-5 justify-between items-center self-stretch my-auto w-35"
        style={{
          ...(tabName == "Dashboard"
            ? {
                paddingTop: "0vh",
                paddingBottom: "0vh",
              }
            : {}),
        }}
      >
        <div onClick={(e)=>{
          e.stopPropagation()
        setEmbeddedAnalytics(!embeddedAnalytics)
        }}
        style={{ cursor: 'pointer',    userSelect: 'none' }} // Add this line

        >
          <svg
            width="13"
            height="8"
            viewBox="0 0 22 14"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M1.5 2.25L11 11.75L20.5 2.25"
              stroke="#101828"
              stroke-width="3"
              stroke-linecap="round"
              stroke-linejoin="round"
            />
          </svg>
        </div>
        <nav className="flex gap-1 items-start self-stretch my-auto">
          {navItems.map((item, index) => (
            <NavItemButton key={index} svg={item.svg} alt={item.alt} />
          ))}
        </nav>
        <UserDropdown />
      </div>
    </header>
  );
};

export default Header;
